# Running Docker container with volume mappings:


PHONY: build dev xl\d

build:
   docker build -t xldeploy:5.5.1 docker-xldeploy/.

plugin:
   docker run -it --rm \
       --name xldeploy-dev \
       -v ${PWD}:/build \
       -v ${PWD}/xldeploy-cache/gradle:/root/.gradle/caches \
       -w /build/xld-xldeploy-plugin.java \
       xldeploy gradle clean assemble
   cp xld-xldeploy-plugin/build/libs/xld-xldeploy-plugin-1.3.0.jar xldeploy-cache/plugins

xld:
   docker run -it --rm \
   --name xldeploy \
   -p 4516:4516 \
   -v ${PWD}/deployit-license.lic:/lib/xl-deploy-5.5.1-server/conf/deployit-license.lic \
   -v ${PWD}/xldeploy-cache/repository:/lib/xl-deploy-5.5.1-server/repository \
   -v ${PWD}/xld-xldeploy-plugin:/lib/xl-deploy-5.5.1-server/ext \
   xldeploy /bin/bash

xld-2:
   docker run -d \
   --name xldeploy2 \
   -p 4517:4516 \
   -v ${PWD}/deployit-license.lic:/lib/xl-deploy-5.5.1-server/conf/deployit-license.lic \
   -v ${PWD}/xldeploy-cache/plugins/xld-xldeploy-plugin-1.3.0.jar:/lib/xl-deploy-5.5.1-server/plugins/xld-xldeploy-plugin-1.3.0.jar \
   xldeploy ./run.sh


# TODO:
- change classpath for xld in container, add ext2, plugins2 directories so you can use a fixed set of plugins and add your own in plugins2 which should be a volume
